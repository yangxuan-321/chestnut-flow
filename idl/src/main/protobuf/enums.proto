syntax = "proto3";

package org.moda.idl;

option optimize_for = SPEED;

// 流程状态
enum FlowStatus {
    FLOW_STATUS_NORMAL                      = 0;    // 正常
    FLOW_STATUS_NOT_AVAILABLE               = 1;    // 暂不可用
    FLOW_STATUS_DELETE                      = 2;    // 删除
}

// 对应流程实例的状态
enum FlowInstanceStatus {
    FLOW_INSTANCE_STATUS_NEW                = 0;    // 新建
    FLOW_INSTANCE_STATUS_RUN                = 1;    // 运行中
    FLOW_INSTANCE_STATUS_COMPLETE           = 2;    // 已完成
    FLOW_INSTANCE_STATUS_STOP               = 3;    // 终止
    FLOW_INSTANCE_STATUS_ERROR              = 4;    // 系统异常
    FLOW_INSTANCE_STATUS_UNKNOWN            = 999;  // 未知
}

enum Bool {
    False                                   = 0;
    True                                    = 1;
}

// 对应节点状态
enum NodeInstanceStatus {
    NODE_INSTANCE_STATUS_NEW                = 0;    // 新建
    NODE_INSTANCE_STATUS_OBTAIN             = 1;    // 被获取
    NODE_INSTANCE_STATUS_COMPLETE           = 2;    // 处理完成
    NODE_INSTANCE_STATUS_STOP               = 3;    // 终止
    NODE_INSTANCE_STATUS_ERROR              = 4;    // 系统处理处理异常
    NODE_INSTANCE_STATUS_UNKNOWN            = 999;  // 未知
}

// 节点类型
enum NodeType {
    NODE_TYPE_PEOPLE                        = 0; // 人工节点
    NODE_TYPE_AUTO                          = 1; // 自动节点
}

// 参数类型
enum ParamType {
    PARAM_TYPE_ENUM                         = 0; // 枚举
    PARAM_TYPE_LONG                         = 1; // 整形
    PARAM_TYPE_DOUBLE                       = 2; // 浮点类型
    PARAM_TYPE_STRING                       = 3; // 字符类型
}

// 角色类型
enum RoleType {
    ADMIN                                   = 0; // 超级管理员
    READ_WRITE                              = 1; // 可读可写
    READ                                    = 2; // 可读
}

enum FlowNodeType {
    FLOW_NODE_TYPE_UNKNOWN             = 0; // 普通节点
    FLOW_NODE_TYPE_START               = 1; // 开始节点
    FLOW_NODE_TYPE_RECT                = 2; // 开始节点
    FLOW_NODE_TYPE_SWITCH              = 3; // 判断节点
    FLOW_NODE_TYPE_END                 = 4; // 结束节点
    FLOW_NODE_TYPE_AUTO                = 5; // 自动节点
    FLOW_NODE_TYPE_MERGE               = 6; // 合并等待节点
}